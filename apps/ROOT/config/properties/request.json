{
	"sections": [
		{
			"title": "Operations",
			"columns": [
				{
					"name": "Member"
				}, {
					"name": "Returns"
				}, {
					"name": "Description"
				}
			],
			"rows": [
				{
					"col1": 'getMethod()',
					"col2": 'String',
					"col3": '<pre class="prettyprint">request.getMethod()</pre>Returns the HTTP method of the request'
				}, {
					"col1": 'getProtocol()',
					"col2": 'String',
					"col3": '<pre class="prettyprint">request.getProtocol()</pre>Returns the protocol of the request'
				},
				{
					"col1": 'getQueryString()',
					"col2": 'String',
					"col3": '<pre class="prettyprint">request.getQueryString()</pre>Returns the query String of the request'
				},
				{
					"col1": 'getContent()',
					"col2": 'String | Object',
					"col3": '<pre class="prettyprint">request.getContent()</pre>Returns the content of the request. <br>If the request content type is either <code>application/json</code> or <code>application/json/badgerfish</code>, then content is returned as an object. Otherwise, it is returned as a String.'
				},
				{
					"col1": 'getContentType()',
					"col2": 'String',
					"col3": '<pre class="prettyprint">request.getContentType()</pre>Returns the content Type of the request'
				},
				{
					"col1": 'getContentLength()',
					"col2": 'Number',
					"col3": '<pre class="prettyprint">request.getContentLength()</pre>Returns the content length of the request'
				},
				{
					"col1": 'getRequestURI()',
					"col2": 'String',
					"col3": '<pre class="prettyprint">request.getRequestURI()</pre>Returns the part of this request\'s URL from the protocol name up to the query String in the first line of the HTTP request'
				},
				{
					"col1": 'getRequestURL()',
					"col2": 'String',
					"col3": '<pre class="prettyprint">request.getRequestURL()</pre>Reconstructs the URL the client used to make the request'
				},
				{
					"col1": 'getPathTranslated()',
					"col2": 'Object',
					"col3": '<pre class="prettyprint">request.getPathTranslated()</pre>Returns any extra path information before the query String, and translates it to a real path. If the URL does not have any extra path information, this method returns null.'
				},
				{
					"col1": 'isSecure()',
					"col2": 'Boolean',
					"col3": '<pre class="prettyprint">request.isSecure()</pre>Returns a Boolean indicating whether this request was made using a secure channel, such as HTTPS.'
				},
				{
					"col1": 'getRemoteAddr()',
					"col2": 'String',
					"col3": '<pre class="prettyprint">request.getRemoteAddr()</pre>Returns the Internet Protocol (IP) address of the client that sent the request.'
				},
				{
					"col1": 'getContextPath()',
					"col2": 'String',
					"col3": '<pre class="prettyprint">request.getContextPath()</pre>Returns the portion of the request URI that indicates the context of the request'
				},
				{
					"col1": 'getLocalPort()',
					"col2": 'Number',
					"col3": '<pre class="prettyprint">request.getLocalPort() </pre>Returns the request local port number'
				},
				{
					"col1": 'getHeader(headerName)',
					"col2": 'String',
					"col3": '<pre class="prettyprint">request.getHeader("User-Agent")</pre>Returns the Header properties'
				},
				{
					"col1": 'getAllHeaders()',
					"col2": 'Object',
					"col3": '<pre class="prettyprint">request.getAllHeaders()</pre>Returns all request headers as an object. <pre class="prettyprint">{\n\t&quot;Content-Type&quot;: &quot;application/json&quot;, \n\t&quot;User-Agent&quot;: &quot;Mozilla/5.0&quot;,\n\t&quot;Cookie&quot;: &quot;JSESSIONID=4DA02FE19BA086964227&quot;\n}</pre>'
				},
				{
					"col1": 'getParameter(paramname [,charset])',
					"col2": 'String',
					"col3": '<pre class="prettyprint">request.getParameter("action")</pre>Returns the request parameter. <code>For multipart/form-data</code> requests, an optional <code>charset</code> parameter can be passed to get the encoded value. '
				},
				{
					"col1": 'getAllParameters([charset])',
					"col2": 'Object',
					"col3": '<pre class="prettyprint">request.getAllParameters("UTF-8")</pre>Returns all request parameters as an object. For <code>multipart/form-data</code> requests, an optional <code>charset</code> parameter can be passed to get the encoded values. '
				},
				{
					"col1": 'getLocale()',
					"col2": 'String',
					"col3": '<pre class="prettyprint">request.getLocale()</pre>Returns the preferred Locale that the client will accept content in, based on the Accept-Language header.  '
				},
				{
					"col1": 'getAllLocales()',
					"col2": 'Object',
					"col3": '<pre class="prettyprint">request.getAllLocales()</pre>Returns an Enumeration of Locale objects indicating, in decreasing order starting with the preferred locale,If the client request doesn\'t provide an Accept-Language header, this method returns an Enumeration containing one Locale, the default locale for the server'
				},
				{
					"col1": 'getMappedPath()',
					"col2": 'Object',
					"col3": '<pre class="prettyprint">getMappedPath()</pre>If file is mapped and request came through <code>mapping.getMappedPathURL()</code> will return file. If file is not mapped It will return null. '
				},
				{
					"col1": 'getFile(formFeildName)',
					"col2": 'File',
					"col3": '<pre class="prettyprint">request.getFile("fieldName")</pre>Returns a file object when the content type is <code>multipart/form-data</code> <pre class="prettyprint">var file = request.getFile("userfile")\nfile.saveAs(file.getName());</pre>'
				},
				{
					"col1": 'getAllFiles()',
					"col2": 'Object',
					"col3": '<pre class="prettyprint">request.getAllFiles()</pre>Returns an object of files when the content type is <code>multipart/form-data</code>  <pre class="prettyprint">var files = request.getAllFiles(); \nfor(var name in files) { \n\tif(files.hasOwnProperty(file)) {\n\t\tvar file = files[name];\n\t\tfile.saveAs(name);\n\t}\n}</pre>'
				},
				{
					"col1": 'getCookie(name)',
					"col2": 'String',
					"col3": '<pre class="prettyprint">request.getCookie(name)</pre>Returns a cookie object. <pre class="prettyprint">{\n\t"name": "user",\n\t"value": "ruchira",\n\t"domain": "jaggeryjs.org",\n\t"maxAge": 100000,\n\t"secure": true,\n\t"path": "/",\n\t"comment": "Authenticated user"\n}</pre>'
				},
				{
					"col1": 'getAllCookies()',
					"col2": 'Object',
					"col3": '<pre class="prettyprint">request.getAllCookies()</pre>Returns an object with cookies.  <pre class="prettyprint">{ \
    "user" : { \
        "name": "user", \
        ..... \
    }, \
    "remember" : { \
        "name": "remember", \
        .....  } \
    } \
}</pre>'
				}
				
			]
		}
	]
}
